########################################################
# Packages
########################################################
install.packages("Shiny")
########################################################
# Packages
########################################################
install.packages("Shiny")
########################################################
# Packages
########################################################
install.packages("shiny")
########################################################
# Packages
########################################################
library(shiny)
runExample("01_hello")
runExample("01_hello")
########################################################
# Tutorial App 1
# https://shiny.rstudio.com/tutorial/written-tutorial/lesson1/
########################################################
########################################################
# Set up
# - Probably not necessary to do this
########################################################
rm(list=ls(all=TRUE))
########################################################
# Packages
########################################################
library(shiny)
########################################################
# UI
########################################################
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
########################################################
# Server
########################################################
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
########################################################
# Creating App: ui + server
########################################################
shinyApp(ui = ui, server = server)
runApp("Tutorial_App_1")
runApp("App-1")
runApp("App_1")
#Have successfully recreated the above app:
runApp("Tutorial_App_1")
# Learning Shiny
# Tutorials taken from: https://shiny.rstudio.com/tutorial/written-tutorial/lesson1/
########################################################
# Set up
########################################################
rm(list=ls(all=TRUE))
########################################################
# Packages
########################################################
library(shiny)
########################################################
# Tutorial 1
########################################################
runExample("01_hello")
